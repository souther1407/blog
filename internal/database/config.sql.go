// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: config.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createConfigParam = `-- name: CreateConfigParam :one
INSERT INTO config (id, created_at, updated_at, name, value)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, created_at, updated_at, name, value
`

type CreateConfigParamParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Value     string
}

func (q *Queries) CreateConfigParam(ctx context.Context, arg CreateConfigParamParams) (Config, error) {
	row := q.db.QueryRowContext(ctx, createConfigParam,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Value,
	)
	var i Config
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Value,
	)
	return i, err
}

const deleteConfigParam = `-- name: DeleteConfigParam :exec
DELETE FROM config
WHERE name = $1
`

func (q *Queries) DeleteConfigParam(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteConfigParam, name)
	return err
}

const getConfigParams = `-- name: GetConfigParams :many
SELECT id, created_at, updated_at, name, value FROM config
`

func (q *Queries) GetConfigParams(ctx context.Context) ([]Config, error) {
	rows, err := q.db.QueryContext(ctx, getConfigParams)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Config
	for rows.Next() {
		var i Config
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Value,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateConfigParam = `-- name: UpdateConfigParam :one
UPDATE config SET
updated_at = $2,
value = $3
WHERE name = $1
RETURNING id, created_at, updated_at, name, value
`

type UpdateConfigParamParams struct {
	Name      string
	UpdatedAt time.Time
	Value     string
}

func (q *Queries) UpdateConfigParam(ctx context.Context, arg UpdateConfigParamParams) (Config, error) {
	row := q.db.QueryRowContext(ctx, updateConfigParam, arg.Name, arg.UpdatedAt, arg.Value)
	var i Config
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Value,
	)
	return i, err
}
